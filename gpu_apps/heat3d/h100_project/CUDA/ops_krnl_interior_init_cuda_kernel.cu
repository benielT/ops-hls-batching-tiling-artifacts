//
// auto-generated by ops.py
//
__constant__ int dims_ops_krnl_interior_init [5][4];
static int dims_ops_krnl_interior_init_h [5][4] = {0};

//user function


__global__ void ops_ops_krnl_interior_init(
float* __restrict data_p,
const float angle_res_x_p,
const float angle_res_y_p,
const float angle_res_z_p,
int blockidx_start,
#ifdef OPS_MPI
int arg_idx0, int arg_idx1, int arg_idx2, 
#endif
int bounds_0_l, int bounds_0_u, int bounds_1_l, int bounds_1_u,
int bounds_2_l, int bounds_2_u, int bounds_3_l, int bounds_3_u) {

  const float * __restrict__ angle_res_x = &angle_res_x_p;
  const float * __restrict__ angle_res_y = &angle_res_y_p;
  const float * __restrict__ angle_res_z = &angle_res_z_p;


  int n_2 = bounds_2_l + blockDim.z * blockIdx.z + threadIdx.z;
  int n_3 = n_2/(bounds_2_u-bounds_2_l);
  #ifdef OPS_BATCHED
  n_2 = n_2%(bounds_2_u-bounds_2_l); 
  #endif
  int n_1 = bounds_1_l + blockDim.y * blockIdx.y + threadIdx.y;
  int n_0 = bounds_0_l + blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[4]={0};
  #ifdef OPS_MPI
  arg_idx[0] = arg_idx0;
  arg_idx[1] = arg_idx1;
  arg_idx[2] = arg_idx2;
  #endif
  #if defined(OPS_BATCHED) && OPS_BATCHED==0
  int idx[] = {arg_idx[0]+n_1, arg_idx[1]+n_2, arg_idx[2]+n_3, blockidx_start + n_0};
  #elif OPS_BATCHED==1
  int idx[] = {arg_idx[0]+n_0, arg_idx[1]+n_2, arg_idx[2]+n_3, blockidx_start + n_1};
  #elif OPS_BATCHED==2
  int idx[] = {arg_idx[0]+n_0, arg_idx[1]+n_1, arg_idx[2]+n_3, blockidx_start + n_2};
  #else
  int idx[] = {arg_idx[0]+n_0, arg_idx[1]+n_1, arg_idx[2]+n_2, blockidx_start + n_3};
  #endif
  if (n_0 < bounds_0_u && n_1 < bounds_1_u && n_2 < bounds_2_u && n_3 < bounds_3_u) {
    ACC<float> data(dims_ops_krnl_interior_init[0][0], dims_ops_krnl_interior_init[0][1], dims_ops_krnl_interior_init[0][2], data_p + n_0 + n_1 * dims_ops_krnl_interior_init[0][0] + n_2 * dims_ops_krnl_interior_init[0][0] * dims_ops_krnl_interior_init[0][1] + n_3 * dims_ops_krnl_interior_init[0][0] * dims_ops_krnl_interior_init[0][1] * dims_ops_krnl_interior_init[0][2]);
    
	data(0,0,0) = sin((*angle_res_x) * idx[0]) * sin((*angle_res_y) * idx[1]) * sin((*angle_res_z) * idx[2]);


  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_ops_krnl_interior_init(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
const int blockidx_start = 0; const int blockidx_end = block->count;
#ifdef OPS_BATCHED
const int batch_size = block->count;
#endif
#else
void ops_par_loop_ops_krnl_interior_init_execute(const char *name, ops_block block, int blockidx_start, int blockidx_end, int dim, int *range, int nargs, ops_arg* args) {
  #ifdef OPS_BATCHED
  const int batch_size = OPS_BATCH_SIZE;
  #endif
  ops_arg arg0 = args[0];
  ops_arg arg1 = args[1];
  ops_arg arg2 = args[2];
  ops_arg arg3 = args[3];
  ops_arg arg4 = args[4];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  #ifndef OPS_LAZY
  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};


  #endif

  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,5,range,6)) return;
  #endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timing_realloc(6,"ops_krnl_interior_init");
    OPS_instance::getOPSInstance()->OPS_kernels[6].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(args, "ops_krnl_interior_init");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #endif

  #ifdef OPS_MPI
  sub_dat_list sd = OPS_sub_dat_list[args[0].dat->index];
  arg_idx[0] = MAX(0,sd->decomp_disp[0]);
  arg_idx[1] = MAX(0,sd->decomp_disp[1]);
  arg_idx[2] = MAX(0,sd->decomp_disp[2]);
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  #ifdef OPS_BATCHED
  const int bounds_0_l = OPS_BATCHED == 0 ? 0 : start[(OPS_BATCHED>0)+-1];
  const int bounds_0_u = OPS_BATCHED == 0 ? MIN(batch_size,block->count-blockidx_start) : end[(OPS_BATCHED>0)+-1];
  const int bounds_1_l = OPS_BATCHED == 1 ? 0 : start[(OPS_BATCHED>1)+0];
  const int bounds_1_u = OPS_BATCHED == 1 ? MIN(batch_size,block->count-blockidx_start) : end[(OPS_BATCHED>1)+0];
  const int bounds_2_l = OPS_BATCHED == 2 ? 0 : start[(OPS_BATCHED>2)+1];
  const int bounds_2_u = OPS_BATCHED == 2 ? MIN(batch_size,block->count-blockidx_start) : end[(OPS_BATCHED>2)+1];
  const int bounds_3_l = OPS_BATCHED == 3 ? 0 : start[(OPS_BATCHED>3)+2];
  const int bounds_3_u = OPS_BATCHED == 3 ? MIN(batch_size,block->count-blockidx_start) : end[(OPS_BATCHED>3)+2];
  #else
  const int bounds_0_l = start[0];
  const int bounds_0_u = end[0];
  const int bounds_1_l = start[1];
  const int bounds_1_u = end[1];
  const int bounds_2_l = start[2];
  const int bounds_2_u = end[2];
  const int bounds_3_l = 0;
  const int bounds_3_u = blockidx_end-blockidx_start;
  #endif
  if (args[0].dat->size[0] != dims_ops_krnl_interior_init_h[0][0] || args[0].dat->size[1] != dims_ops_krnl_interior_init_h[0][1] || args[0].dat->size[2] != dims_ops_krnl_interior_init_h[0][2] || args[0].dat->size[3] != dims_ops_krnl_interior_init_h[0][3]) {
    dims_ops_krnl_interior_init_h[0][0] = args[0].dat->size[0];
    dims_ops_krnl_interior_init_h[0][1] = args[0].dat->size[1];
    dims_ops_krnl_interior_init_h[0][2] = args[0].dat->size[2];
    dims_ops_krnl_interior_init_h[0][2] = args[0].dat->size[3];
    cutilSafeCall(cudaMemcpyToSymbol( dims_ops_krnl_interior_init, dims_ops_krnl_interior_init_h, sizeof(dims_ops_krnl_interior_init)));
  }

  //set up initial pointers
  float * __restrict__ data_p = (float *)(args[0].data_d + args[0].dat->base_offset + blockidx_start * args[0].dat->batch_offset);


  float * __restrict__ angle_res_x = (float *)args[2].data;


  float * __restrict__ angle_res_y = (float *)args[3].data;


  float * __restrict__ angle_res_z = (float *)args[4].data;




  int x_size = MAX(0,bounds_0_u-bounds_0_l);
  int y_size = MAX(0,bounds_1_u-bounds_1_l);
  int z_size = MAX(0,bounds_2_u-bounds_2_l);
  z_size *= MAX(0,bounds_3_u-bounds_3_l);

  dim3 grid( (x_size-1)/OPS_instance::getOPSInstance()->OPS_block_size_x+ 1, (y_size-1)/OPS_instance::getOPSInstance()->OPS_block_size_y + 1, (z_size-1)/OPS_instance::getOPSInstance()->OPS_block_size_z+1);
  dim3 tblock(MIN(OPS_instance::getOPSInstance()->OPS_block_size_x, x_size), MIN(OPS_instance::getOPSInstance()->OPS_block_size_y, y_size),MIN(OPS_instance::getOPSInstance()->OPS_block_size_z, z_size));



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 5);
  ops_halo_exchanges(args,5,range);
  ops_H_D_exchanges_device(args, 5);
  #endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    OPS_instance::getOPSInstance()->OPS_kernels[6].mpi_time += __t1-__t2;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_ops_krnl_interior_init<<<grid, tblock >>> (  data_p,
         *angle_res_x, *angle_res_y, *angle_res_z,         blockidx_start,
#ifdef OPS_MPI
         arg_idx[0], arg_idx[1], arg_idx[2], blockidx_start,
#endif
         bounds_0_l, bounds_0_u, bounds_1_l, bounds_1_u,
         bounds_2_l, bounds_2_u, bounds_3_l, bounds_3_u);

  cutilSafeCall(cudaGetLastError());

  if (OPS_instance::getOPSInstance()->OPS_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    OPS_instance::getOPSInstance()->OPS_kernels[6].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 5);
  ops_set_halo_dirtybit3(&args[0],range);
  #endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    OPS_instance::getOPSInstance()->OPS_kernels[6].mpi_time += __t1-__t2;
    OPS_instance::getOPSInstance()->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg0);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_ops_krnl_interior_init(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 6;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 6;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg*)malloc(5*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->args[2] = arg2;
  char *tmp = (char*)malloc(1*sizeof(float));
  memcpy(tmp, arg2.data,1*sizeof(float));
  desc->args[2].data = tmp;
  desc->args[3] = arg3;
  tmp = (char*)malloc(1*sizeof(float));
  memcpy(tmp, arg3.data,1*sizeof(float));
  desc->args[3].data = tmp;
  desc->args[4] = arg4;
  tmp = (char*)malloc(1*sizeof(float));
  memcpy(tmp, arg4.data,1*sizeof(float));
  desc->args[4].data = tmp;
  desc->function = ops_par_loop_ops_krnl_interior_init_execute;
  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timing_realloc(6,"ops_krnl_interior_init");
  }
  ops_enqueue_kernel(desc);
}
#endif
