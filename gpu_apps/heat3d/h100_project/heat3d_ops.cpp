//
// auto-generated by ops.py
//



void ops_init_backend();
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <fstream>

int imax, jmax, kmax;
extern const unsigned short mem_vector_factor;


#define OPS_3D



#define BATCH_MODE

#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_ops_krnl_zero_init(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_ops_krnl_zero_init(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_ops_krnl_zero_init(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_ops_krnl_zero_init(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_ops_krnl_zero_init(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_ops_krnl_zero_init(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_ops_krnl_interior_init(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_ops_krnl_copy(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_ops_krnl_heat3D(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_ops_krnl_copy(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );



#include <vector>
#include "heat3d.hpp"
#include "heat3d_kernels.h"
#include "heat3d_cpu_verification.hpp"

#ifdef BATCH_MODE
    #ifdef VERIFICATION
        #undef VERIFICATION
    #endif
#endif
#ifdef PROFILE
    #include <chrono>
#endif

#ifdef BATCH_MODE
int main(int argc, char** argv)
#else
int main(int argc, const char** argv)
#endif
{

    ops_init(argc, argv,1);
  ops_init_backend();

#ifdef BATCH_MODE
    std::cout << "Batched" << std::endl;
#endif

    imax = 5;
    jmax = 5;
    kmax = 5;

    unsigned int iter_max = 2;
    unsigned int batches = 1;
    unsigned int n_sys = 1;
    const char* pch;

#ifdef POWER_PROFILE
    unsigned int power_iter = 1;
    #ifdef PROFILE
    std::cerr << "POWER_PROFILE cannot be enabled with PROFILE" << std::endl;
    exit(-1);
    #endif
#endif
    for ( int n = 1; n < argc; n++ )
    {
        pch = strstr(argv[n], "-sizex=");

        if(pch != NULL) {
            imax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-sizey=");

        if(pch != NULL) {
            jmax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-sizez=");

        if(pch != NULL) {
            kmax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-iters=");

        if(pch != NULL) {
            iter_max = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-batch=");

        if(pch != NULL) {
            batches = atoi ( argv[n] + 7 ); continue;
        }
#ifdef POWER_PROFILE
        pch = strstr(argv[n], "-piter=");
        if(pch != NULL) {
            power_iter = atoi ( argv[n] + 7 ); continue;
        }
    #ifndef BATCH_MODE
        batches = 1;
    #endif
#endif
#ifdef BATCH_MODE
        pch = strstr(argv[n], "-n_sys=");
        if(pch != NULL) {
            n_sys = atoi ( argv[n] + 7 ); continue;
        }
#endif
    }

    GridParameter gridData;
    gridData.logical_size_x = imax;
    gridData.logical_size_y = jmax;
    gridData.logical_size_z = kmax;
    gridData.batch = batches;
    gridData.num_iter = iter_max;

    gridData.act_size_x = gridData.logical_size_x + 2;
    gridData.act_size_y = gridData.logical_size_y + 2;
    gridData.act_size_z = gridData.logical_size_z + 2;

    #ifdef OPS_FPGA
    gridData.grid_size_x = (gridData.act_size_x % mem_vector_factor) != 0 ?
			      (gridData.act_size_x/mem_vector_factor + 1) * mem_vector_factor:
			      gridData.act_size_x;
    #else
    gridData.grid_size_x = gridData.act_size_x;
    #endif
	  gridData.grid_size_y = gridData.act_size_y;
    gridData.grid_size_z = gridData.act_size_z;

    unsigned int data_size_bytes = sizeof(float) * gridData.grid_size_x
            * gridData.grid_size_y * gridData.grid_size_z;

    float angle_res_x = 2 * M_PI / gridData.logical_size_x;
    float angle_res_y = 2 * M_PI / gridData.logical_size_y;
    float angle_res_z = 2 * M_PI / gridData.logical_size_z;

    if (data_size_bytes >= 4000000000)
    {
        std::cerr << "Maximum buffer size is exceeded!" << std::endl;
    }

#ifdef BATCH_MODE
    batches = batches / n_sys;
#endif

#ifdef PROFILE
	double init_runtime[batches];
	double main_loop_runtime[batches];

    std::string profile_filename = "perf_profile.csv";

    std::ofstream fstream;
    fstream.open(profile_filename, std::ios::out | std::ios::trunc);

    if (!fstream.is_open()) {
        std::cerr << "Error: Could not open the file " << profile_filename << std::endl;
        return 1;
    }
#endif

    ops_block blocks[batches];

    for (unsigned int bat = 0; bat < batches; bat++)
    {
        std::string name = std::string("batch_") + std::to_string(bat);
#ifndef BATCH_MODE
        blocks[bat] = ops_decl_block(3, name.c_str());
#else
        blocks[bat] = ops_decl_block_batch(3, name.c_str(), n_sys, OPS_BATCHED);
#endif
    }

    int s3d_1pt[] = {0,0,0};
    ops_stencil stencil3D_1pt = ops_decl_stencil(3, 1, s3d_1pt, "1pt stencil");

    int s3d_7pt[] = {0,0,0, 1,0,0, -1,0,0, 0,1,0, 0,-1,0, 0,0,1, 0,0,-1};
    ops_stencil stencil3D_7pt = ops_decl_stencil(3, 7, s3d_7pt, "7pt stencil");

    int size[] = {imax, jmax, kmax};
    int base[] = {0,0,0};
    int d_m[] = {-1,-1,-1};
    int d_p[] = {1,1,1};
    float* temp = NULL;

    ops_dat u[batches];
    ops_dat u2[batches];
    std::vector<heat3DParameter> calcParam(gridData.batch);

#ifdef VERIFICATION
    float* u_cpu[batches];
    float* u2_cpu[batches];
#endif

    for (unsigned int bat = 0; bat < batches; bat++)
    {
        std::string name = std::string("u_") + std::to_string(bat);
        u[bat] = ops_decl_dat(blocks[bat], 1, size, base, d_m, d_p, temp, "float", name.c_str());
        name = std::string("u2_") + std::to_string(bat);
        u2[bat] = ops_decl_dat(blocks[bat], 1, size, base, d_m, d_p, temp, "float", name.c_str());

#ifdef VERIFICATION
        u_cpu[bat] = (float*)malloc(data_size_bytes);
        u2_cpu[bat] = (float*)malloc(data_size_bytes);
#endif

        calcParam[bat].alpha = 1.5/1000;
        calcParam[bat].h = 1/gridData.act_size_x;
        calcParam[bat].delta_t = 0.5;
        calcParam[bat].K = calcParam[bat].alpha * calcParam[bat].delta_t / (calcParam[bat].h * calcParam[bat].h);
    }

    int bottom_plane_range[] = {-1,gridData.logical_size_x+1, -1,gridData.logical_size_y+1, -1,0};
    int top_plane_range[] = {-1,gridData.logical_size_x+1, -1,gridData.logical_size_y+1, gridData.logical_size_z,gridData.logical_size_z+1};
    int front_plane_range[] = {-1,gridData.logical_size_x+1,-1,0,-1,gridData.logical_size_z+1};
    int back_plane_range[] = {-1,gridData.logical_size_x+1, gridData.logical_size_y,gridData.logical_size_y+1, -1,gridData.logical_size_z+1};
    int left_plane_range[] = {-1,0, -1,gridData.logical_size_y+1, -1,gridData.logical_size_z+1};
    int right_plane_range[] = {gridData.logical_size_x,gridData.logical_size_x+1, -1,gridData.logical_size_y+1, -1,gridData.logical_size_z+1};
    int full_range[] = {-1,gridData.logical_size_x+1, -1,gridData.logical_size_y+1, -1,gridData.logical_size_z+1};
    int interior_range[] =  {0,gridData.logical_size_x, 0,gridData.logical_size_y, 0,gridData.logical_size_z};
    ops_partition("");
#ifdef PROFILE
    ops_diagnostic_output();
#endif

#ifdef POWER_PROFILE
    for (unsigned int p = 0; p < power_iter; p++)
    {
#endif

#ifdef BATCH_MODE
    ops_par_loop_blocks_all(n_sys);
#endif

    for (unsigned int bat = 0; bat < batches; bat++)
    {
#ifdef PROFILE
        auto init_start_clk_point =  std::chrono::high_resolution_clock::now();
#endif

        ops_par_loop_ops_krnl_zero_init("ops_top_plane_init", blocks[bat], 3, top_plane_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE));

        ops_par_loop_ops_krnl_zero_init("ops_bottom_plane_init", blocks[bat], 3, bottom_plane_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE));

        ops_par_loop_ops_krnl_zero_init("ops_front_plane_init", blocks[bat], 3, front_plane_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE));

        ops_par_loop_ops_krnl_zero_init("ops_back_plane_init", blocks[bat], 3, back_plane_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE));

        ops_par_loop_ops_krnl_zero_init("ops_left_plane_init", blocks[bat], 3, left_plane_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE));

        ops_par_loop_ops_krnl_zero_init("ops_right_plane_init", blocks[bat], 3, right_plane_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE));

        ops_par_loop_ops_krnl_interior_init("ops_interior_init", blocks[bat], 3, interior_range,
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE),
                     ops_arg_idx(),
                     ops_arg_gbl(&angle_res_x, 1, "float", OPS_READ),
                     ops_arg_gbl(&angle_res_y, 1, "float", OPS_READ),
                     ops_arg_gbl(&angle_res_z, 1, "float", OPS_READ));

        ops_par_loop_ops_krnl_copy("ops_copy_init", blocks[bat], 3, full_range,
                     ops_arg_dat(u2[bat], 1, stencil3D_1pt, "float", OPS_WRITE),
                     ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_READ));

#ifdef PROFILE
        auto init_end_clk_point = std::chrono::high_resolution_clock::now();
        init_runtime[bat] = std::chrono::duration<double, std::micro> (init_end_clk_point - init_start_clk_point).count();
#endif

#ifdef VERIFICATION
        auto u_raw = (float*)ops_dat_get_raw_pointer(u[bat], 0, stencil3D_1pt, OPS_HOST);
        auto u2_raw = (float*)ops_dat_get_raw_pointer(u2[bat], 0, stencil3D_1pt, OPS_HOST);

        initialize_grid(u_cpu[bat], size, d_m, d_p, full_range, angle_res_x, angle_res_y, angle_res_z);
        copy_grid(u_cpu[bat], u2_cpu[bat], gridData);
        if(verify(u_raw, u_cpu[bat], size, d_m, d_p, full_range))
            std::cout << "[BATCH - " << bat << "] verification of u after initiation" << "[PASSED]" << std::endl;
        else
            std::cout << "[BATCH - " << bat << "] verification of u after initiation" << "[FAILED]" << std::endl;

        if(verify(u2_raw, u2_cpu[bat], size, d_m, d_p, full_range))
            std::cout << "[BATCH - " << bat << "] verification of u2 after initiation" << "[PASSED]" << std::endl;
        else
            std::cout << "[BATCH - " << bat << "] verification of u2 after initiation" << "[FAILED]" << std::endl;
#endif

        ops_printf("Launching poisson calculation: %d x %d x %d mesh\n", size[0], size[1], size[2]);

#ifdef PROFILE
        auto main_loop_start_clk_point = std::chrono::high_resolution_clock::now();
#endif

        float param_k = calcParam[bat].K;

#ifndef OPS_FPGA
        for (int iter = 0; iter < iter_max; iter++)
        {
            ops_par_loop_ops_krnl_heat3D("ops_krnl_heat3D", blocks[bat], 3, interior_range,
                         ops_arg_dat(u2[bat], 1, stencil3D_1pt, "float", OPS_WRITE),
                         ops_arg_dat(u[bat], 1, stencil3D_7pt, "float", OPS_READ),
                         ops_arg_gbl(&param_k, 1, "float", OPS_READ),
                         ops_arg_idx());

            ops_par_loop_ops_krnl_copy("ops_krnl_copy after_calc", blocks[bat], 3, interior_range,
                         ops_arg_dat(u[bat], 1, stencil3D_1pt, "float", OPS_WRITE),
                         ops_arg_dat(u2[bat], 1, stencil3D_1pt, "float", OPS_READ));
        }
#else
        ops_iter_par_loop("ops_iter_par_loop_0", iter_max,
            ops_par_loop_ops_krnl_heat3D("ops_krnl_heat3D", blocks[bat], 3, interior_range,
                         ops_arg_dat(u2[bat], 1, stencil3D_1pt, "float", OPS_WRITE),
                         ops_arg_dat(u[bat], 1, stencil3D_7pt, "float", OPS_READ),
                         ops_arg_gbl(&param_k, 1, "float", OPS_READ),
                         ops_arg_idx());
#endif
#ifdef PROFILE
        auto main_loop_end_clk_point = std::chrono::high_resolution_clock::now();
    #ifndef OPS_FPGA
        main_loop_runtime[bat] = std::chrono::duration<double, std::micro>(main_loop_end_clk_point - main_loop_start_clk_point).count();
    #else
        main_loop_runtime[bat] = ops_hls_get_execution_runtime<std::chrono::microseconds>(std::string("ops_iter_par_loop_0"));
    #endif
#endif
    }

#ifdef BATCH_MODE
    ops_par_loop_blocks_end();
#endif

#ifdef POWER_PROFILE
    }
#endif

#ifdef VERIFICATION
    for (unsigned int bat = 0; bat < batches; bat++)
    {
        auto u_raw = (float*)ops_dat_get_raw_pointer(u[bat], 0, stencil3D_1pt, OPS_HOST);
        auto u2_raw = (float*)ops_dat_get_raw_pointer(u2[bat], 0, stencil3D_1pt, OPS_HOST);

        heat3D_explicit(u_cpu[bat], u2_cpu[bat], gridData, calcParam);






        if(verify(u2_raw, u2_cpu[bat], size, d_m, d_p, full_range))
            std::cout << "[BATCH - " << bat << "] verification of u2 after calculation" << "[PASSED]" << std::endl;
        else
            std::cout << "[BATCH - " << bat << "] verification of u2 after calculation" << "[FAILED]" << std::endl;
    }
#endif

    for (unsigned int bat = 0; bat < batches; bat++)
    {
        ops_free_dat(u[bat]);
        ops_free_dat(u2[bat]);

#ifdef VERIFICATION
        free(u_cpu[bat]);
        free(u2_cpu[bat]);

#endif
    }

#ifdef PROFILE
    ops_timing_output(stdout);
	std::cout << std::endl;
	std::cout << "******************************************************" << std::endl;
	std::cout << "**                runtime summary                   **" << std::endl;
	std::cout << "******************************************************" << std::endl;

	double avg_main_loop_runtime = 0;
	double max_main_loop_runtime = 0;
	double min_main_loop_runtime = 0;
	double avg_init_runtime = 0;
	double max_init_runtime = 0;
	double min_init_runtime = 0;
	double main_loop_std = 0;
	double init_std = 0;
	double total_std = 0;

    fstream << "grid_x," << "grid_y," << "grid_z," << "iters," << "batch_id," << "batch_size," << "init_time," << "main_time," << "total_time" << std::endl;

	for (unsigned int bat = 0; bat < batches; bat++)
	{

#ifdef BATCHING
        std::cout << "[WARNING] runtime is devided by he batch_size: " << n_sys << std::endl;
        main_loop_runtime[bat] = main_loop_runtime[bat]/n_sys;
        init_runtime[bat] = init_runtime[bat]/n_sys;
#endif
        fstream << imax << "," << jmax << "," << 1 << "," << iter_max << "," << bat << "," << n_sys << "," << init_runtime[bat]  \
                << "," << main_loop_runtime[bat] << "," << (main_loop_runtime[bat] + init_runtime[bat]) << std::endl;

		std::cout << "run: "<< bat << "| total runtime: " << main_loop_runtime[bat] + init_runtime[bat] << "(us)" << std::endl;
		std::cout << "     |--> init runtime: " << init_runtime[bat] << "(us)" << std::endl;
		std::cout << "     |--> main loop runtime: " << main_loop_runtime[bat] << "(us)" << std::endl;
		avg_init_runtime += init_runtime[bat];
		avg_main_loop_runtime += main_loop_runtime[bat];

		if (bat == 0)
		{
			max_main_loop_runtime = main_loop_runtime[bat];
			min_main_loop_runtime = main_loop_runtime[bat];
			max_init_runtime = init_runtime[bat];
			min_init_runtime = init_runtime[bat];
		}
		else
		{
			max_main_loop_runtime = std::max(max_main_loop_runtime, main_loop_runtime[bat]);
			min_main_loop_runtime = std::min(min_main_loop_runtime, main_loop_runtime[bat]);
			max_init_runtime = std::max(max_init_runtime, init_runtime[bat]);
			min_init_runtime = std::min(min_init_runtime, init_runtime[bat]);
		}
	}

	avg_init_runtime /= batches;
	avg_main_loop_runtime /= batches;

	for (unsigned int bat = 0; bat < batches; bat++)
	{
		main_loop_std += std::pow(main_loop_runtime[bat] - avg_main_loop_runtime, 2);
		init_std += std::pow(init_runtime[bat] - avg_init_runtime, 2);
		total_std += std::pow(main_loop_runtime[bat] + init_runtime[bat] - avg_init_runtime - avg_main_loop_runtime, 2);
	}

	main_loop_std = std::sqrt(main_loop_std / batches);
	init_std = std::sqrt(init_std / batches);
	total_std = std::sqrt(total_std / batches);

	std::cout << "Total runtime (AVG): " << avg_main_loop_runtime + avg_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << avg_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << avg_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Total runtime (MIN): " << min_main_loop_runtime + min_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << min_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << min_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Total runtime (MAX): " << max_main_loop_runtime + max_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << max_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << max_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Standard Deviation init: " << init_std << std::endl;
	std::cout << "Standard Deviation main loop: " << main_loop_std << std::endl;
	std::cout << "Standard Deviation total: " << total_std << std::endl;
	std::cout << "======================================================" << std::endl;

    fstream.close();

    if (fstream.good()) {
        std::cout << "Successfully wrote data to " << profile_filename << std::endl;
    } else {
            std::cerr << "Error occurred during writing to " << profile_filename << std::endl;
            return 1;
    }
#endif

    ops_exit();

    std::cout << "Exit properly" << std::endl;
    return 0;
}
