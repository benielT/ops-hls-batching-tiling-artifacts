//
// auto-generated by ops.py
//



void ops_init_backend();
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

int imax, jmax;
float pi  = 2.0 * asin(1.0);

#define OPS_2D
#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_set_zero(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_set_zero(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_left_bndcon(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_right_bndcon(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_apply_stencil(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_copy(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );


#include "laplace_kernels.h"
#include "laplace2d_cpu_verification.hpp"

#define OPS_HLS_V2

#define PROFILE

#define BATCH_MODE


#ifdef BATCH_MODE
    #ifdef VERIFICATION
        #undef VERIFICATION
    #endif
#endif
#ifdef PROFILE
    #include <chrono>
#endif

int main(int argc, char **argv)
{


  ops_init(argc,argv,1);
  ops_init_backend();

#ifdef BATCH_MODE
    std::cout << "Batched" << std::endl;
#endif
    unsigned int batches = 1;

    jmax = 100;

    imax = 100;
    unsigned int iter_max = 100;

    const char* pch;

#ifdef POWER_PROFILE
    unsigned int power_iter = 1;
#ifdef PROFILE
    std::cerr << "POWER_PROFILE cannot be enabled with PROFILE" << std::endl;
    exit(-1);
#endif
#endif
    for ( int n = 1; n < argc; n++ )
    {
        pch = strstr(argv[n], "-sizex=");

        if(pch != NULL) {
            imax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-sizey=");

        if(pch != NULL) {
            jmax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-iters=");

        if(pch != NULL) {
            iter_max = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-batch=");

        if(pch != NULL) {
            batches = atoi ( argv[n] + 7 ); continue;
        }
#ifdef POWER_PROFILE
        pch = strstr(argv[n], "-piter=");
        if(pch != NULL) {
            power_iter = atoi ( argv[n] + 7 ); continue;
        }
    #ifndef BATCH_MODE
        batches = 1;
    #endif
#endif
    }

#ifdef PROFILE
    #ifndef BATCH_MODE
	double init_runtime[batches];
	double main_loop_runtime[batches];
    #else
    double init_runtime;
    double main_loop_runtime;
    #endif
#endif

#ifndef BATCH_MODE
    for (unsigned int bat = 0; bat < batches; bat++)
    {
#else
        unsigned int bat = 0;
#endif
        float *A=NULL;
        float *Anew=NULL;
#ifdef VERIFICATION
        float *Acpu=NULL;
        float *AnewCpu=NULL;
#endif





#ifdef BATCH_MODE
        ops_block block = ops_decl_block_batch(2,"block",batches,OPS_BATCHED);
#else
        ops_block block = ops_decl_block(2, "my_grid");
#endif

        int size[] = {imax, jmax};
        int base[] = {0,0};
        int d_m[] = {-1,-1};
        int d_p[] = {1,1};
        ops_dat d_A    = ops_decl_dat(block, 1, size, base,
                                    d_m, d_p, A,    "float", "A");
        ops_dat d_Anew = ops_decl_dat(block, 1, size, base,
                                    d_m, d_p, Anew, "float", "Anew");

#ifdef VERIFICATION
        int grid_size_y = size[1] - d_m[1] + d_p[1];
#ifdef OPS_FPGA
        int grid_size_x = ((size[0] - d_m[0] + d_p[0] + 16 - 1) / 16) * 16;
#else
        int grid_size_x = size[0] - d_m[0] + d_p[0];
#endif
        Acpu = (float*) malloc(sizeof(float) * grid_size_x * grid_size_y);
        AnewCpu = (float*) malloc(sizeof(float) * grid_size_x * grid_size_y);
#endif

        int s2d_00[] = {0,0};
        ops_stencil S2D_00 = ops_decl_stencil(2,1,s2d_00,"0,0");
        int s2d_5pt[] = {0,0, 1,0, -1,0, 0,1, 0,-1};
        ops_stencil S2D_5pt = ops_decl_stencil(2,5,s2d_5pt,"5pt");



              ops_decl_const2( "imax",1, "int",&imax);
              ops_decl_const2( "jmax",1, "int",&jmax);
              ops_decl_const2( "pi",1, "float",&pi);

        ops_partition("");
        ops_diagnostic_output();

#ifdef PROFILE
		auto init_start_clk_point = std::chrono::high_resolution_clock::now();
#endif
#ifdef BATCH_MODE
        ops_par_loop_blocks_all(batches);
#endif
#ifdef POWER_PROFILE
    for (unsigned int p = 0; p < power_iter; p++)
    {
#endif
        ops_printf("Laplace 2D Calculation: %d x %d mesh\n", imax+2, jmax+2);

        int bottom_range[] = {-1, imax+1, -1, 0};
        ops_par_loop_set_zero("set_zero", block, 2, bottom_range,
                     ops_arg_dat(d_A, 1, S2D_00, "float", OPS_WRITE));

        int top_range[] = {-1, imax+1, jmax, jmax+1};
        ops_par_loop_set_zero("set_zero", block, 2, top_range,
                     ops_arg_dat(d_A, 1, S2D_00, "float", OPS_WRITE));

        int left_range[] = {-1, 0, -1, jmax+1};
        ops_par_loop_left_bndcon("left_bndcon", block, 2, left_range,
                     ops_arg_dat(d_A, 1, S2D_00, "float", OPS_WRITE),
                     ops_arg_idx());

        int right_range[] = {imax, imax+1, -1, jmax+1};
        ops_par_loop_right_bndcon("right_bndcon", block, 2, right_range,
                     ops_arg_dat(d_A, 1, S2D_00, "float", OPS_WRITE),
                     ops_arg_idx());

        ops_par_loop_set_zero("set_zero", block, 2, bottom_range,
                     ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_WRITE));

        ops_par_loop_set_zero("set_zero", block, 2, top_range,
                     ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_WRITE));

        ops_par_loop_left_bndcon("left_bndcon", block, 2, left_range,
                     ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_WRITE),
                     ops_arg_idx());

        ops_par_loop_right_bndcon("right_bndcon", block, 2, right_range,
                     ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_WRITE),
                     ops_arg_idx());

#ifdef PROFILE
		auto init_end_clk_point = std::chrono::high_resolution_clock::now();
    #ifndef BATCH_MODE
		init_runtime[bat] = std::chrono::duration<double, std::micro> (init_end_clk_point - init_start_clk_point).count();
    #else
        init_runtime = std::chrono::duration<double, std::micro> (init_end_clk_point - init_start_clk_point).count();
    #endif
#endif

#ifdef VERIFICATION
        A = (float*)ops_dat_get_raw_pointer(d_A, 0, S2D_00, OPS_HOST);
        Anew = (float*)ops_dat_get_raw_pointer(d_Anew, 0, S2D_00, OPS_HOST);

        if(verify(A, Anew, size, d_m, d_p))
            std::cout << "verification of d_A and d_Anew" << "[PASSED]" << std::endl;
        else
            std::cerr << "verification of d_A and d_Anew" << "[FAILED]" << std::endl;

        initilizeGrid(Acpu, size, d_m, d_p, pi, jmax);
        copyGrid(AnewCpu, Acpu, size, d_m, d_p);

        if (verify(Acpu, A, size, d_m, d_p))
            std::cout << "verification of Acpu and A" << "[PASSED]" << std::endl;
        else
            std::cerr << "verification of Acpu and A" << "[FAILED]" << std::endl;

        if (verify(AnewCpu, Anew, size, d_m, d_p))
            std::cout << "verification of AnewCpu and Anew" << "[PASSED]" << std::endl;
        else
            std::cerr << "verification of AnewCpu and Anew" << "[FAILED]" << std::endl;

#endif

        int interior_range[] = {0,imax,0,jmax};









#ifdef VERIFICATION




#endif

#ifdef PROFILE
		auto main_loop_start_clk_point = std::chrono::high_resolution_clock::now();
#endif

#ifndef OPS_FPGA
        for (unsigned int i = 0; i < iter_max; i++)
        {

            ops_par_loop_apply_stencil("apply_stencil", block, 2, interior_range,
                         ops_arg_dat(d_A, 1, S2D_5pt, "float", OPS_READ),
                         ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_WRITE));

            ops_par_loop_copy("copy", block, 2, interior_range,
                         ops_arg_dat(d_A, 1, S2D_00, "float", OPS_WRITE),
                         ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_READ));


        }
#else
        ops_iter_par_loop("ops_iter_par_loop_0", iter_max,
            ops_par_loop_apply_stencil("apply_stencil", block, 2, interior_range,
                         ops_arg_dat(d_A, 1, S2D_5pt, "float", OPS_READ),
                         ops_arg_dat(d_Anew, 1, S2D_00, "float", OPS_WRITE));
#endif

    ops_par_loop_blocks_end();
#ifdef PROFILE
		auto main_loop_end_clk_point = std::chrono::high_resolution_clock::now();
    #ifndef BATCH_MODE
        #ifndef OPS_FPGA
		main_loop_runtime[bat] = std::chrono::duration<double, std::micro>(main_loop_end_clk_point - main_loop_start_clk_point).count();
        #else
        main_loop_runtime[bat] = ops_hls_get_execution_runtime<std::chrono::microseconds>(std::string("ops_iter_par_loop_0"));
        #endif
    #else
        #ifndef OPS_FPGA
		main_loop_runtime = std::chrono::duration<double, std::micro>(main_loop_end_clk_point - main_loop_start_clk_point).count();
        #else
        main_loop_runtime = ops_hls_get_execution_runtime<std::chrono::microseconds>(std::string("ops_iter_par_loop_0"));
        #endif
    #endif
#endif

#ifdef POWER_PROFILE
    }
#endif
#ifdef VERIFICATION
        A = (float*)ops_dat_get_raw_pointer(d_A, 0, S2D_00, OPS_HOST);
        Anew = (float*)ops_dat_get_raw_pointer(d_Anew, 0, S2D_00, OPS_HOST);

		for (int iter = 0; iter < iter_max; iter++)
		{
			calcGrid(Acpu, AnewCpu, size, d_m, d_p);
			copyGrid(Acpu, AnewCpu, size, d_m, d_p);
		}





		if (verify(Anew, AnewCpu, size, d_m, d_p))
			std::cout << "verification of Anew and AnewCpu after calc" << "[PASSED]" << std::endl;
		else
			std::cerr << "verification of Anew and AnewCpu after calc" << "[FAILED]" << std::endl;





		free(Acpu);
		free(AnewCpu);
    #endif











#ifndef BATCH_MODE
    }
#endif

#ifdef PROFILE
	std::cout << std::endl;
	std::cout << "******************************************************" << std::endl;
	std::cout << "**                runtime summary                   **" << std::endl;
	std::cout << "******************************************************" << std::endl;

#ifndef BATCH_MODE
	double avg_main_loop_runtime = 0;
	double max_main_loop_runtime = 0;
	double min_main_loop_runtime = 0;
	double avg_init_runtime = 0;
	double max_init_runtime = 0;
	double min_init_runtime = 0;
	double main_loop_std = 0;
	double init_std = 0;
	double total_std = 0;

	for (unsigned int bat = 0; bat < batches; bat++)
	{
		std::cout << "run: "<< bat << "| total runtime: " << main_loop_runtime[bat] + init_runtime[bat] << "(us)" << std::endl;
		std::cout << "     |--> init runtime: " << init_runtime[bat] << "(us)" << std::endl;
		std::cout << "     |--> main loop runtime: " << main_loop_runtime[bat] << "(us)" << std::endl;
		avg_init_runtime += init_runtime[bat];
		avg_main_loop_runtime += main_loop_runtime[bat];

		if (bat == 0)
		{
			max_main_loop_runtime = main_loop_runtime[bat];
			min_main_loop_runtime = main_loop_runtime[bat];
			max_init_runtime = init_runtime[bat];
			min_init_runtime = init_runtime[bat];
		}
		else
		{
			max_main_loop_runtime = std::max(max_main_loop_runtime, main_loop_runtime[bat]);
			min_main_loop_runtime = std::min(min_main_loop_runtime, main_loop_runtime[bat]);
			max_init_runtime = std::max(max_init_runtime, init_runtime[bat]);
			min_init_runtime = std::min(min_init_runtime, init_runtime[bat]);
		}
	}

	avg_init_runtime /= batches;
	avg_main_loop_runtime /= batches;

	for (unsigned int bat = 0; bat < batches; bat++)
	{
		main_loop_std += std::pow(main_loop_runtime[bat] - avg_main_loop_runtime, 2);
		init_std += std::pow(init_runtime[bat] - avg_init_runtime, 2);
		total_std += std::pow(main_loop_runtime[bat] + init_runtime[bat] - avg_init_runtime - avg_main_loop_runtime, 2);
	}

	main_loop_std = std::sqrt(main_loop_std / batches);
	init_std = std::sqrt(init_std / batches);
	total_std = std::sqrt(total_std / batches);

	std::cout << "Total runtime (AVG): " << avg_main_loop_runtime + avg_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << avg_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << avg_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Total runtime (MIN): " << min_main_loop_runtime + min_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << min_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << min_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Total runtime (MAX): " << max_main_loop_runtime + max_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << max_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << max_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Standard Deviation init: " << init_std << std::endl;
	std::cout << "Standard Deviation main loop: " << main_loop_std << std::endl;
	std::cout << "Standard Deviation total: " << total_std << std::endl;
#endif
	std::cout << "Total runtime : " << main_loop_runtime + init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << main_loop_runtime << "(us)" << std::endl;

	std::cout << "======================================================" << std::endl;
#endif

    ops_exit();

    std::cout << "Exit properly" << std::endl;
    return 0;
}
