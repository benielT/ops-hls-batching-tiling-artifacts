//
// auto-generated by ops.py
//



void ops_init_backend();
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

extern const unsigned short mem_vector_factor;

#define OPS_2D

#define OPS_HLS_V2

#define PROFILE
#define BATCHING

#include "user_types.h"
#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_kernel_copy(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_kernel_populate(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_kernel_initialguess(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_jac2D_kernel_stencil(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_kernel_copy(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );


//#include "jac2D9pt_kernel.h"
#include "jac2D9pt_cpu_verification.hpp"

#ifdef PROFILE
    #include <chrono>
#endif

#ifdef BATCHING
int main(int argc, char **argv)
#else
int main(int argc, const char **argv)
#endif
{


    ops_init(argc,argv,1);
  ops_init_backend();


    int imax = 20;
    int jmax = 20;
    unsigned int iter_max = 135;
    unsigned int batches = 1;
    const char* pch;

#ifdef POWER_PROFILE
    unsigned int power_iter = 1;
    #ifdef PROFILE
    std::cerr << "POWER_PROFILE cannot be enabled with PROFILE" << std::endl;
    exit(-1);
    #endif
#endif
#ifdef BATCHING
    unsigned int nsys = 1;
#endif

    for ( int n = 1; n < argc; n++ )
    {
        pch = strstr(argv[n], "-sizex=");

        if(pch != NULL) {
            imax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-sizey=");

        if(pch != NULL) {
            jmax = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-iters=");

        if(pch != NULL) {
            iter_max = atoi ( argv[n] + 7 ); continue;
        }
        pch = strstr(argv[n], "-batch=");

        if(pch != NULL) {
            batches = atoi ( argv[n] + 7 ); continue;
        }
#ifdef BATCHING
        pch = strstr(argv[n], "-n_sys=");
        if(pch != NULL) {
            nsys = atoi ( argv[n] + 7 ); continue;
        }
#endif
#ifdef POWER_PROFILE
        pch = strstr(argv[n], "-piter=");
        if(pch != NULL) {
            power_iter = atoi ( argv[n] + 7 ); continue;
        }
#ifndef BATCHING
        batches = 1;
    #endif
#endif

    }

#ifdef BATCHING
    unsigned int batched_batches = (batches + nsys - 1)/nsys;
    printf("Batched. Batched batches: %d\n", batched_batches);
#else
    unsigned int batched_batches = batches;
#endif

#ifdef PROFILE
	double init_runtime[batched_batches];
	double main_loop_runtime[batched_batches];
#endif

    ops_block blocks[batched_batches];

    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
        std::string name = std::string("batch_") + std::to_string(bat);
    #ifdef BATCHING
        blocks[bat] = ops_decl_block_batch(2, name.c_str(), nsys, 2);
    #else
        blocks[bat] = ops_decl_block(2, name.c_str());
    #endif
    }


    int s2D_00[] = {0,0};
    ops_stencil S2D_00 = ops_decl_stencil(2, 1, s2D_00, "00");
    int s2D_9pt[] = {-1,-1, 0,-1, 1,-1, -1,0, 0,0, 1,0, -1,1, 0,1, 1,1};
    ops_stencil S2D_9PT = ops_decl_stencil(2, 9, s2D_9pt, "00:10:-10:01:0-1");

    int size[] = {imax, jmax};
    int base[] = {0,0};
    int d_m[] = {-1,-1};
    int d_p[] = {1,1};
    float* temp = NULL;

    ops_dat u[batched_batches];
    ops_dat u2[batched_batches];
    ops_dat f[batched_batches];
    ops_dat ref[batched_batches];

#if !defined(BATCHING) && defined(VERIFICATION)
    float* u_cpu[batches];
    float* u2_cpu[batches];
    float* f_cpu[batches];
    float* ref_cpu[batches];

    int grid_size_y = size[1] - d_m[1] + d_p[1];
    #ifdef OPS_FPGA
    int grid_size_x = ((size[0] - d_m[0] + d_p[0] + mem_vector_factor - 1) / mem_vector_factor) * mem_vector_factor;
    #else
    int grid_size_x = size[0] - d_m[0] + d_p[0];
    #endif
#endif

    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
        std::string name = std::string("u_") + std::to_string(bat);
        u[bat] = ops_decl_dat(blocks[bat], 1, size, base, d_m, d_p, temp, "float", name.c_str());
        name = std::string("u2_") + std::to_string(bat);
        u2[bat] = ops_decl_dat(blocks[bat], 1, size, base, d_m, d_p, temp, "float", name.c_str());
        name = std::string("f_") + std::to_string(bat);
        f[bat] = ops_decl_dat(blocks[bat], 1, size, base, d_m, d_p, temp, "float", name.c_str());
        name = std::string("ref_") + std::to_string(bat);
        ref[bat] = ops_decl_dat(blocks[bat], 1, size, base, d_m, d_p, temp, "float", name.c_str());
#if !defined(BATCHING) && defined(VERIFICATION)
        u_cpu[bat] = (float*)malloc(sizeof(float) * grid_size_x * grid_size_y);
        u2_cpu[bat] = (float*)malloc(sizeof(float) * grid_size_x * grid_size_y);
        f_cpu[bat] = (float*)malloc(sizeof(float) * grid_size_x * grid_size_y);
        ref_cpu[bat] = (float*)malloc(sizeof(float) * grid_size_x * grid_size_y);
#endif
    }

    ops_partition("");

    int full_range[] = {d_m[0], size[0] + d_p[0], d_m[1], size[1] + d_p[1]};
    int internal_range[] = {0, size[0], 0, size[1]};

#ifdef BATCHING
    ops_par_loop_blocks_all(nsys);
#endif
#ifdef POWER_PROFILE
    for (unsigned int p = 0; p < power_iter; p++)
    {
#endif

    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
#ifdef PROFILE
        auto init_start_clk_point =  std::chrono::high_resolution_clock::now();
#endif
#if !defined(BATCHING) && defined(VERIFICATION)

        initialise_grid(u_cpu[bat], size, d_m, d_p, full_range);

        copy_grid(u2_cpu[bat], u_cpu[bat], size, d_m, d_p, full_range);

        ops_dat_fetch_data(u[bat], 0, (char*)u_cpu[bat]);

        ops_par_loop_kernel_copy("kernel_update", blocks[bat], 2, full_range,
                     ops_arg_dat(u[bat], 1, S2D_00, "float", OPS_READ),
                     ops_arg_dat(u2[bat], 1, S2D_00, "float", OPS_WRITE));
#else
        ops_par_loop_kernel_populate("kernel_populate", blocks[bat], 2, full_range,
                     ops_arg_dat(u[bat], 1, S2D_00, "float", OPS_WRITE));

        ops_par_loop_kernel_initialguess("kernel_initialguess", blocks[bat], 2, internal_range,
                     ops_arg_dat(u[bat], 1, S2D_00, "float", OPS_WRITE));

        ops_par_loop_kernel_copy("kernel_update", blocks[bat], 2, full_range,
                     ops_arg_dat(u[bat], 1, S2D_00, "float", OPS_READ),
                     ops_arg_dat(u2[bat], 1, S2D_00, "float", OPS_WRITE));
#endif
#ifdef PROFILE
        auto init_end_clk_point = std::chrono::high_resolution_clock::now();
        init_runtime[bat] = std::chrono::duration<double, std::micro> (init_end_clk_point - init_start_clk_point).count();
#endif
#ifndef BATCHING
#ifdef VERIFICATION
        auto u_raw = (float*)ops_dat_get_raw_pointer(u[bat], 0, S2D_00, OPS_HOST);
        auto u2_raw = (float*)ops_dat_get_raw_pointer(u2[bat], 0, S2D_00, OPS_HOST);


        if(verify(u_raw, u_cpu[bat], size, d_m, d_p, full_range))
            std::cout << "[BATCH - " << bat << "] verification of u after initiation" << "[PASSED]" << std::endl;
        else
            std::cout << "[BATCH - " << bat << "] verification of u after initiation" << "[FAILED]" << std::endl;

        if(verify(u2_raw, u2_cpu[bat], size, d_m, d_p, full_range))
            std::cout << "[BATCH - " << bat << "] verification of u2 after initiation" << "[PASSED]" << std::endl;
        else
            std::cout << "[BATCH - " << bat << "] verification of u2 after initiation" << "[FAILED]" << std::endl;
#endif
#endif
    }


    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
        ops_printf("Launching poisson calculation: %d x %d mesh\n", size[0], size[1]);
#ifdef PROFILE
        auto main_loop_start_clk_point = std::chrono::high_resolution_clock::now();
#endif
#ifndef OPS_FPGA
        for (int iter = 0; iter < iter_max; iter++)
        {
            ops_par_loop_jac2D_kernel_stencil("jac2D_kernel_stencil", blocks[bat], 2, internal_range,
                         ops_arg_dat(u[bat], 1, S2D_9PT, "float", OPS_READ),
                         ops_arg_dat(u2[bat], 1, S2D_00, "float", OPS_WRITE));

            ops_par_loop_kernel_copy("kernel_update", blocks[bat], 2, internal_range,
                         ops_arg_dat(u2[bat], 1, S2D_00, "float", OPS_READ),
                         ops_arg_dat(u[bat], 1, S2D_00, "float", OPS_WRITE));
        }
#else
        ops_iter_par_loop("ops_iter_par_loop_0", iter_max,
            ops_par_loop_jac2D_kernel_stencil("jac2D_kernel_stencil", blocks[bat], 2, internal_range,
                         ops_arg_dat(u[bat], 1, S2D_9PT, "float", OPS_READ),
                         ops_arg_dat(u2[bat], 1, S2D_00, "float", OPS_WRITE));
#endif
#ifdef PROFILE
        auto main_loop_end_clk_point = std::chrono::high_resolution_clock::now();
    #ifndef OPS_FPGA
        main_loop_runtime[bat] = std::chrono::duration<double, std::micro>(main_loop_end_clk_point - main_loop_start_clk_point).count();
    #else
        main_loop_runtime[bat] = ops_hls_get_execution_runtime<std::chrono::microseconds>(std::string("ops_iter_par_loop_0"));
    #endif
#endif
    }
#ifdef POWER_PROFILE
    }
#endif
#ifdef BATCHING
     ops_par_loop_blocks_end();
#endif

#ifndef BATCHING
#ifdef VERIFICATION
    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
        auto u_raw = (float*)ops_dat_get_raw_pointer(u[bat], 0, S2D_00, OPS_HOST);
        auto u2_raw = (float*)ops_dat_get_raw_pointer(u2[bat], 0, S2D_00, OPS_HOST);

        for (int iter = 0; iter < iter_max; iter++)
        {
            stencil_computation(u_cpu[bat], u2_cpu[bat], size, d_m, d_p, internal_range);
            copy_grid(u_cpu[bat], u2_cpu[bat], size, d_m, d_p, internal_range);
        }







        if(verify(u2_raw, u2_cpu[bat], size, d_m, d_p, full_range))
            std::cout << "[BATCH - " << bat << "] verification of u2 after calculation" << "[PASSED]" << std::endl;
        else
            std::cout << "[BATCH - " << bat << "] verification of u2 after calculation" << "[FAILED]" << std::endl;

    }
#endif
#endif

#ifndef BATCHING

    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
        ops_free_dat(u[bat]);
        ops_free_dat(u2[bat]);
        ops_free_dat(f[bat]);
        ops_free_dat(ref[bat]);
    }
#ifdef VERIFICATION
    for (unsigned int bat = 0; bat < batched_batches; bat++)
    {
        free(u_cpu[bat]);
        free(u2_cpu[bat]);
        free(f_cpu[bat]);
        free(ref_cpu[bat]);
    }
#endif
#endif

#ifdef PROFILE

	std::cout << std::endl;
	std::cout << "******************************************************" << std::endl;
	std::cout << "**                runtime summary                   **" << std::endl;
	std::cout << "******************************************************" << std::endl;

	double avg_main_loop_runtime = 0;
	double max_main_loop_runtime = 0;
	double min_main_loop_runtime = 0;
	double avg_init_runtime = 0;
	double max_init_runtime = 0;
	double min_init_runtime = 0;
	double main_loop_std = 0;
	double init_std = 0;
	double total_std = 0;

	for (unsigned int bat = 0; bat < batched_batches; bat++)
	{
		std::cout << "run: "<< bat << "| total runtime: " << main_loop_runtime[bat] + init_runtime[bat] << "(us)" << std::endl;
		std::cout << "     |--> init runtime: " << init_runtime[bat] << "(us)" << std::endl;
		std::cout << "     |--> main loop runtime: " << main_loop_runtime[bat] << "(us)" << std::endl;
		avg_init_runtime += init_runtime[bat];
		avg_main_loop_runtime += main_loop_runtime[bat];

		if (bat == 0)
		{
			max_main_loop_runtime = main_loop_runtime[bat];
			min_main_loop_runtime = main_loop_runtime[bat];
			max_init_runtime = init_runtime[bat];
			min_init_runtime = init_runtime[bat];
		}
		else
		{
			max_main_loop_runtime = std::max(max_main_loop_runtime, main_loop_runtime[bat]);
			min_main_loop_runtime = std::min(min_main_loop_runtime, main_loop_runtime[bat]);
			max_init_runtime = std::max(max_init_runtime, init_runtime[bat]);
			min_init_runtime = std::min(min_init_runtime, init_runtime[bat]);
		}
	}

	avg_init_runtime /= batched_batches;
	avg_main_loop_runtime /= batched_batches;

	for (unsigned int bat = 0; bat < batched_batches; bat++)
	{
		main_loop_std += std::pow(main_loop_runtime[bat] - avg_main_loop_runtime, 2);
		init_std += std::pow(init_runtime[bat] - avg_init_runtime, 2);
		total_std += std::pow(main_loop_runtime[bat] + init_runtime[bat] - avg_init_runtime - avg_main_loop_runtime, 2);
	}

	main_loop_std = std::sqrt(main_loop_std / batched_batches);
	init_std = std::sqrt(init_std / batched_batches);
	total_std = std::sqrt(total_std / batched_batches);

	std::cout << "Total runtime (AVG): " << avg_main_loop_runtime + avg_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << avg_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << avg_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Total runtime (MIN): " << min_main_loop_runtime + min_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << min_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << min_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Total runtime (MAX): " << max_main_loop_runtime + max_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> init runtime: " << max_init_runtime << "(us)" << std::endl;
	std::cout << "     |--> main loop runtime: " << max_main_loop_runtime << "(us)" << std::endl;
	std::cout << "Standard Deviation init: " << init_std << std::endl;
	std::cout << "Standard Deviation main loop: " << main_loop_std << std::endl;
	std::cout << "Standard Deviation total: " << total_std << std::endl;
	std::cout << "======================================================" << std::endl;
#endif

    ops_exit();

    std::cout << "Exit properly" << std::endl;
    return 0;
}
