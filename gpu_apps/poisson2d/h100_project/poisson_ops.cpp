//
// auto-generated by ops.py
//



void ops_init_backend();
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <fstream>
double dx,dy;


#define OPS_2D
#include  "ops_lib_cpp.h"

//
// ops_par_loop declarations
//

void ops_par_loop_poisson_kernel_populate(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg,
  ops_arg );

void ops_par_loop_poisson_kernel_update(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_poisson_kernel_initialguess(char const *, ops_block, int , int*,
  ops_arg );

void ops_par_loop_poisson_kernel_stencil(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );

void ops_par_loop_poisson_kernel_update(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );


#include "user_types.h"
//#include "poisson_kernel.h"

int main(int argc, char **argv)
{


  ops_init(argc,argv,1);
  ops_init_backend();


  int logical_size_x = 100;
  int logical_size_y = 100;
  int n_iter = 100;
  int itertile = n_iter;
  int non_copy = 0;
  int num_systems = 100;

  const char* pch;
  for ( int n = 1; n < argc; n++ ) {
    pch = strstr(argv[n], "-sizex=");
    if(pch != NULL) {
      logical_size_x = atoi ( argv[n] + 7 ); continue;
    }
    pch = strstr(argv[n], "-sizey=");
    if(pch != NULL) {
      logical_size_y = atoi ( argv[n] + 7 ); continue;
    }
    pch = strstr(argv[n], "-iters=");
    if(pch != NULL) {
      n_iter = atoi ( argv[n] + 7 ); continue;
    }
    pch = strstr(argv[n], "-itert=");
    if(pch != NULL) {
      itertile = atoi ( argv[n] + 7 ); continue;
    }
    pch = strstr(argv[n], "-non-copy");
    if(pch != NULL) {
      non_copy = 1; continue;
    }
    pch = strstr(argv[n], "-batch=");
    if(pch != NULL) {
      num_systems = atoi ( argv[n] + 7 ); continue;
    }
  }
#ifdef PROFILE
    std::string profile_filename = "perf_profile.csv";

    std::ofstream fstream;
    fstream.open(profile_filename, std::ios::out | std::ios::trunc);

    if (!fstream.is_open()) {
        std::cerr << "Error: Could not open the file " << profile_filename << std::endl;
        return 1;
    }
#endif
  ops_printf("Grid: %dx%d, %d batch size %d iterations\n",logical_size_x,logical_size_y,num_systems, n_iter);
  dx = 0.01;
  dy = 0.01;
  ops_decl_const2( "dx",1, "double",&dx);
  ops_decl_const2( "dy",1, "double",&dy);

  ops_block block = ops_decl_block_batch(2,"block",num_systems,OPS_BATCHED);

  int s2D_00[]         = {0,0};
  ops_stencil S2D_00 = ops_decl_stencil( 2, 1, s2D_00, "00");
  int s2D_00_P10_M10_0P1_0M1[]         = {0,0, 1,0, -1,0, 0,1, 0,-1};
  ops_stencil S2D_00_P10_M10_0P1_0M1 = ops_decl_stencil( 2, 5, s2D_00_P10_M10_0P1_0M1, "00:10:-10:01:0-1");

  ops_reduction red_err = ops_decl_reduction_handle_batch(sizeof(double), "double", "err", num_systems);

  int d_p[2] = {1,1};
  int d_m[2] = {-1,-1};
  int base[2] = {0,0};
  int size[2] = {logical_size_x,logical_size_y};
  double* temp = NULL;
  ops_dat coordx = ops_decl_dat(block, 1, size, base, d_m, d_p, temp,"double", "coordx");
  ops_dat coordy = ops_decl_dat(block, 1, size, base, d_m, d_p, temp,"double", "coordy");
  ops_dat u = ops_decl_dat(block, 1, size, base, d_m, d_p, temp,"double", "u");
  ops_dat u2 = ops_decl_dat(block, 1, size, base, d_m, d_p, temp,"double", "u2");
  ops_dat f = ops_decl_dat(block, 1, size, base, d_m, d_p, temp,"double", "f");
  ops_dat ref = ops_decl_dat(block, 1, size, base, d_m, d_p, temp,"double", "ref");

  ops_partition("");
	ops_diagnostic_output();


  double ct0, ct1, et0, et1;
  ops_timers(&ct0, &et0);

  ops_par_loop_blocks_all(num_systems);

  int iter_range_full[] = {-1,size[0]+1,-1,size[1]+1};

  ops_par_loop_poisson_kernel_populate("poisson_kernel_populate", block, 2, iter_range_full,
               ops_arg_idx(),
               ops_arg_dat(u, 1, S2D_00, "double", OPS_WRITE),
               ops_arg_dat(f, 1, S2D_00, "double", OPS_WRITE),
               ops_arg_dat(ref, 1, S2D_00, "double", OPS_WRITE));

  ops_par_loop_poisson_kernel_update("poisson_kernel_update", block, 2, iter_range_full,
               ops_arg_dat(u, 1, S2D_00, "double", OPS_READ),
               ops_arg_dat(u2, 1, S2D_00, "double", OPS_WRITE));


  int iter_range[] = {0,size[0],0,size[1]};

  ops_par_loop_poisson_kernel_initialguess("poisson_kernel_initialguess", block, 2, iter_range,
               ops_arg_dat(u, 1, S2D_00, "double", OPS_WRITE));

  double it0, it1;
  ops_timers(&ct0, &it0);

  for (int iter = 0; iter < n_iter; iter++) {


    ops_par_loop_poisson_kernel_stencil("poisson_kernel_stencil", block, 2, iter_range,
                 ops_arg_dat(u, 1, S2D_00_P10_M10_0P1_0M1, "double", OPS_READ),
                 ops_arg_dat(u2, 1, S2D_00, "double", OPS_WRITE));

    if (non_copy) {
      ops_par_loop_poisson_kernel_stencil("poisson_kernel_stencil", block, 2, iter_range,
                   ops_arg_dat(u2, 1, S2D_00_P10_M10_0P1_0M1, "double", OPS_READ),
                   ops_arg_dat(u, 1, S2D_00, "double", OPS_WRITE));
    } else {
      ops_par_loop_poisson_kernel_update("poisson_kernel_update", block, 2, iter_range,
                   ops_arg_dat(u2, 1, S2D_00, "double", OPS_READ),
                   ops_arg_dat(u, 1, S2D_00, "double", OPS_WRITE));
    }
  }
  ops_execute();
  ops_timers(&ct0, &it1);



  ops_par_loop_blocks_end();



  ops_timers(&ct1, &et1);
  ops_timing_output(stdout);
  double wall_time_us = (et1-et0) * pow(10,6);
  double init_grid_runtime = (it0-et0) * pow(10,6);
  double kernel_runtime = (it1-it0) * pow(10,6);
  ops_printf("\nTotal Wall time %lf (us)\n",wall_time_us);
  ops_printf("   |--- Init time %lf (us)\n",init_grid_runtime);
  ops_printf("   `--- kernel time %lf (us)\n",kernel_runtime);
  double err_diff = 0.0;
  int i = 0;









#ifdef PROFILE
    fstream << "grid_x," << "grid_y," << "grid_z," << "iters," << "batch_id," << "batch_size," << "init_time," << "main_time," << "total_time" << std::endl;
    fstream << logical_size_x << "," << logical_size_y << "," << 1 << "," << n_iter << "," << 1 << "," << num_systems << "," << init_grid_runtime/num_systems   \
                << "," << kernel_runtime/num_systems << "," << wall_time_us/num_systems << std::endl;
    fstream.close();

    if (fstream.good()) {
        std::cout << "Successfully wrote data to " << profile_filename << std::endl;
    } else {
            std::cerr << "Error occurred during writing to " << profile_filename << std::endl;
            return 1;
    }
#endif
  ops_exit();
  return 0;
}
